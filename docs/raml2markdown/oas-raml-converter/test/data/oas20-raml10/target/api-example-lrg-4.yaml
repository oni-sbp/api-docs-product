title: AdhereTech External API
version: 0.11.0
protocols:
  - HTTPS
baseUri: 'https://example.com/api/v1'
securitySchemes:
  auth:
    type: Basic Authentication
annotationTypes:
  oas-schema-title:
    allowedTargets: TypeDeclaration
    type: string
  oas-responses-default:
    allowedTargets: Method
    type: any
types:
  Bottle-array:
    type: array
    items:
      type: object
      (oas-schema-title): Bottle
      properties:
        bottleUid:
          type: string
        isActive:
          type: boolean
        remindersActive:
          type: boolean
        onBottleLights:
          type: boolean
        onBottleSounds:
          type: boolean
        doseOne:
          type: string
        doseTwo:
          type: string
        doseThree:
          type: string
        feedbackActive:
          type: boolean
        patientUid:
          type: string
  Bottle:
    type: object
    (oas-schema-title): Bottle
    properties:
      bottleUid:
        type: string
      isActive:
        type: boolean
      remindersActive:
        type: boolean
      onBottleLights:
        type: boolean
      onBottleSounds:
        type: boolean
      doseOne:
        type: string
      doseTwo:
        type: string
      doseThree:
        type: string
      feedbackActive:
        type: boolean
      patientUid:
        type: string
  Patient-array:
    type: array
    items:
      type: object
      (oas-schema-title): Patient
      properties:
        patientUid:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        contactMethod:
          type: string
        emailAddress:
          type: string
        caregiverPhoneNumber:
          type: string
        caregiverContactMethod:
          type: string
        caregiverEmailAddress:
          type: string
        programName:
          type: string
        timezone:
          type: string
        defaultDose1:
          type: string
        defaultDose2:
          type: string
        defaultDose3:
          type: string
        status:
          type: string
        lastDose:
          type: string
        adherence:
          type: number
        adherence7Day:
          type: number
        adherence30Day:
          type: number
        bottleUids:
          type: array
          items:
            type: string
  Patient:
    type: object
    (oas-schema-title): Patient
    properties:
      patientUid:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      phoneNumber:
        type: string
      contactMethod:
        type: string
      emailAddress:
        type: string
      caregiverPhoneNumber:
        type: string
      caregiverContactMethod:
        type: string
      caregiverEmailAddress:
        type: string
      programName:
        type: string
      timezone:
        type: string
      defaultDose1:
        type: string
      defaultDose2:
        type: string
      defaultDose3:
        type: string
      status:
        type: string
      lastDose:
        type: string
      adherence:
        type: number
      adherence7Day:
        type: number
      adherence30Day:
        type: number
      bottleUids:
        type: array
        items:
          type: string
  FeedbackRequest-array:
    type: array
    items:
      type: object
      (oas-schema-title): FeedbackRequest
      properties:
        feedbackId:
          type: integer
          format: int32
        patientUid:
          type: string
        bottleUid:
          type: string
        feedbackProfileId:
          type: integer
          format: int32
        sendTime:
          type: string
  FeedbackRequest:
    type: object
    (oas-schema-title): FeedbackRequest
    properties:
      feedbackId:
        type: integer
        format: int32
      patientUid:
        type: string
      bottleUid:
        type: string
      feedbackProfileId:
        type: integer
        format: int32
      sendTime:
        type: string
  Program-array:
    type: array
    items:
      type: object
      (oas-schema-title): Program
      properties:
        programId:
          type: integer
          format: int32
        programName:
          type: string
        programDescription:
          type: string
        startDate:
          type: datetime
        endDate:
          type: datetime
        patientUids:
          type: array
          items:
            type: string
  Program:
    type: object
    (oas-schema-title): Program
    properties:
      programId:
        type: integer
        format: int32
      programName:
        type: string
      programDescription:
        type: string
      startDate:
        type: datetime
      endDate:
        type: datetime
      patientUids:
        type: array
        items:
          type: string
  User-array:
    type: array
    items:
      type: object
      (oas-schema-title): User
      properties:
        username:
          type: string
        emailAddress:
          type: string
        roles:
          type: array
          items:
            type: string
  User:
    type: object
    (oas-schema-title): User
    properties:
      username:
        type: string
      emailAddress:
        type: string
      roles:
        type: array
        items:
          type: string
  BottleReading-array:
    type: array
    items:
      type: object
      (oas-schema-title): BottleReading
      properties:
        bottleReadingId:
          type: integer
          format: int32
        bottleUid:
          type: string
        checkinType:
          type: string
        recordedDatetime:
          type: string
        receivedDatetime:
          type: string
        batteryLevel:
          type: integer
          format: int32
        batteryStatus:
          type: string
        cellServiceLevel:
          type: integer
          format: int32
        cellServiceStatus:
          type: string
  Dose-array:
    type: array
    items:
      type: object
      (oas-schema-title): Dose
      properties:
        patientUid:
          type: string
        bottleUid:
          type: string
        bottleReadingId:
          type: integer
          format: int32
        reminderSent:
          type: boolean
        doseStatus:
          type: string
        deadline:
          type: string
        recordedDatetime:
          type: string
  Event-array:
    type: array
    items:
      type: object
      (oas-schema-title): Event
      properties:
        eventId:
          type: string
        eventType:
          type: string
        timeOccurred:
          type: string
        patientUid:
          type: string
        bottleUid:
          type: string
        bottleReadingId:
          type: string
  EventSubscription-array:
    type: array
    items:
      type: object
      (oas-schema-title): EventSubscription
      properties:
        subscriptionId:
          type: string
        eventType:
          type: string
        username:
          type: string
        callbackUrl:
          type: string
  EventSubscription:
    type: object
    (oas-schema-title): EventSubscription
    properties:
      subscriptionId:
        type: string
      eventType:
        type: string
      username:
        type: string
      callbackUrl:
        type: string
  Alert-array:
    type: array
    items:
      type: object
      (oas-schema-title): Alert
      properties:
        alertId:
          type: integer
          format: int32
        alertType:
          type: string
        timeOccurred:
          type: string
        programName:
          type: string
        patientUid:
          type: string
        bottleUid:
          type: string
        bottleReadingId:
          type: integer
          format: int32
        priority:
          type: integer
          format: int32
        state:
          type: string
  Alert:
    type: object
    (oas-schema-title): Alert
    properties:
      alertId:
        type: integer
        format: int32
      alertType:
        type: string
      timeOccurred:
        type: string
      programName:
        type: string
      patientUid:
        type: string
      bottleUid:
        type: string
      bottleReadingId:
        type: integer
        format: int32
      priority:
        type: integer
        format: int32
      state:
        type: string
  SearchResult-array:
    type: array
    items:
      type: object
      (oas-schema-title): SearchResult
      properties:
        resultType:
          type: string
        resultUid:
          type: string
  Pause-array:
    type: array
    items:
      type: object
      (oas-schema-title): Pause
      properties:
        pauseId:
          type: integer
          format: int32
        patientUid:
          type: string
        status:
          type: string
        startdate:
          type: string
        enddate:
          type: string
        reason:
          type: string
  Pause:
    type: object
    (oas-schema-title): Pause
    properties:
      pauseId:
        type: integer
        format: int32
      patientUid:
        type: string
      status:
        type: string
      startdate:
        type: string
      enddate:
        type: string
      reason:
        type: string
/bottles:
  get:
    displayName: getBottlesByValues
    description: Get a list of bottles filtered by status and/or patient(s).
    responses:
      '200':
        description: Query completed; results returned.
        body:
          application/json:
            type: Bottle-array
      '400':
        description: Incomplete or invalid pagination or sort parameters.
      '405':
        description: Validation exception.
    queryParameters:
      isActive:
        description: Flag that indicates if bottle is active.
        type: boolean
      remindersActive:
        description: Flag that indicates if reminders are active.
        type: boolean
      onBottleLights:
        description: Flag that indicates if visual alarms are active.
        type: boolean
      onBottleSounds:
        description: Flag that indicates if auditory alarms are active.
        type: boolean
      feedbackActive:
        description: Flag that indicates if feedback requests are active.
        type: boolean
      patientUid:
        description: The ID of the patient using this bottle.
        type: integer
      page:
        description: Current front-end page number; required for pagination.
        type: integer
      itemsPerPage:
        description: Current front-end items per page value; required for pagination.
        type: integer
      sort:
        description: >-
          Attribute(s) and order(s) to sort by in the following example format -
          "uid desc, timeoccurred asc" etc. Attribute names are case-sensitive.
          Omit to sort by 'uid' ascending as default.
        type: string
    securedBy:
      - auth
  '/{bottleUid}':
    uriParameters:
      bottleUid:
        description: bottleUid
        type: string
    put:
      displayName: updateBottle
      description: Modify a bottle by its UID.
      responses:
        '200':
          description: Bottle found and modified.
        '404':
          description: Bottle not found.
        '405':
          description: Validation exception.
      securedBy:
        - auth
    get:
      displayName: getBottle
      description: Get a bottle by its UID.
      responses:
        '200':
          description: Bottle found and returned
          body:
            application/json:
              type: Bottle
        '404':
          description: Bottle not found.
      securedBy:
        - auth
/patients:
  post:
    displayName: addPatient
    description: Add a new patient to the database.
    responses:
      '200':
        description: Patient created.
      '404':
        description: Address not found.
      '405':
        description: Validation error.
    queryParameters:
      'bottleUids,':
        description: >-
          Comma separated list of bottleUids for this bottle. Removing from this
          list will remove it from the patient. Adding bottles must be done
          through Bottle endpoint
        type: string
    securedBy:
      - auth
  get:
    displayName: getPatientsByValues
    description: Get a list of patients filtered by their values.
    responses:
      '200':
        description: Query completed; results returned.
        body:
          application/json:
            type: Patient-array
      '400':
        description: Incomplete or invalid pagination or sort parameters.
      '405':
        description: Validation exception.
    queryParameters:
      firstName:
        description: Patient's first name.
        type: string
      lastName:
        description: Patient's last name.
        type: string
      phoneNumber:
        description: Patient's phone number.
        type: string
      programName:
        description: A string to search within the program's name.
        type: string
      contactMethod:
        description: 'The contact method used to reach the patient (phone, sms or email).'
        type: string
      emailAddress:
        description: Patient's email address.
        type: string
      page:
        description: Current front-end page number; required for pagination.
        type: integer
      itemsPerPage:
        description: Current front-end items per page value; required for pagination.
        type: integer
      sort:
        description: >-
          Attribute(s) and order(s) to sort by in the following example format -
          "uid desc, timeoccurred asc" etc. Attribute names are case-sensitive.
          Omit to sort by 'uid' ascending as default.
        type: string
    securedBy:
      - auth
  '/{patientUid}':
    uriParameters:
      patientUid:
        description: patientUid
        type: string
    delete:
      displayName: deletePatient
      description: Delete a patient by UID.
      responses:
        '404':
          description: Patient not found.
      securedBy:
        - auth
    put:
      displayName: updatePatient
      description: Modify a Patient using a patient UID number.
      responses:
        '200':
          description: Patient found and modified.
        '404':
          description: Patient not found.
        '405':
          description: Validation exception.
      securedBy:
        - auth
    get:
      displayName: getPatient
      description: Get a patient by UID.
      responses:
        '200':
          description: Patient found and returned.
          body:
            application/json:
              type: Patient
        '404':
          description: Patient not found.
      securedBy:
        - auth
    /disenroll:
      post:
        displayName: disenrollPatient
        description: Disenroll a patient by UID.
        responses:
          '200':
            description: Patient found and disenrolled. All bottles and reminders disabled
          '400':
            description: >-
              Patient not found. Or patient already disenrolled. Or invalid
              parameter
        queryParameters:
          endDate:
            description: >-
              effective endDate for disenrollment (default is now). Dates in
              future not allowed. (UTC).
            type: string
            required: false
          notes:
            description: notes to include with disenrollment action
            type: string
            required: false
        securedBy:
          - auth
    /reenroll:
      post:
        displayName: reenrollpatient
        description: Reenroll a patient.
        responses:
          '200':
            description: Patient found and reenrolled
          '404':
            description: Patient not found. Or patient already enrolled
        queryParameters:
          notes:
            description: Notes to be included with reenrollment event
            type: string
            required: false
        securedBy:
          - auth
    /feedbackrequests:
      delete:
        displayName: deleteFeedbackRequests
        description: Delete all active feedback requests for a patient.
        responses:
          '404':
            description: Patient not found.
        securedBy:
          - auth
      post:
        displayName: addFeedbackRequest
        description: Add a new feedback request for a patient.
        responses:
          '200':
            description: Feedback request created.
          '404':
            description: Patient not found.
          '405':
            description: Validation error.
        securedBy:
          - auth
      get:
        displayName: getFeedbackRequests
        description: Get all active (scheduled but unsent) feedback requests for a patient.
        responses:
          '200':
            description: Query completed; results returned.
            body:
              application/json:
                type: FeedbackRequest-array
          '400':
            description: Incomplete or invalid pagination or sort parameters.
          '405':
            description: Validation exception.
        queryParameters:
          page:
            description: Current front-end page number; required for pagination.
            type: integer
          itemsPerPage:
            description: Current front-end items per page value; required for pagination.
            type: integer
          sort:
            description: >-
              Attribute(s) and order(s) to sort by in the following example
              format - "uid desc, timeoccurred asc" etc. Attribute names are
              case-sensitive. Omit to sort by 'timesent' descending as default.
            type: string
        securedBy:
          - auth
      '/{feedbackId}':
        uriParameters:
          feedbackId:
            description: feedbackId
            type: integer
        delete:
          displayName: deleteFeedbackRequest
          description: Delete a feedback request by ID.
          responses:
            '404':
              description: Feedback request not found.
          securedBy:
            - auth
        put:
          displayName: updateFeedbackRequest
          description: Modify a feedback request by its ID.
          responses:
            '200':
              description: Feedback request found and modified.
            '404':
              description: Feedback request not found.
            '405':
              description: Validation exception.
          securedBy:
            - auth
        get:
          displayName: getFeedbackRequest
          description: Get a feedback request by its ID.
          responses:
            '200':
              description: Feedback request found and returned
              body:
                application/json:
                  type: FeedbackRequest
            '404':
              description: Feedback request not found.
          securedBy:
            - auth
/programs:
  post:
    displayName: addProgram
    description: Add a new program to the database.
    responses:
      '200':
        description: Program created.
      '404':
        description: Address not found.
      '405':
        description: Validation error.
    securedBy:
      - auth
  get:
    displayName: getPrograms
    description: Get a list of programs filtered by their values.
    responses:
      '200':
        description: Query completed; results returned.
        body:
          application/json:
            type: Program-array
      '400':
        description: Incomplete or invalid pagination or sort parameters.
      '405':
        description: Validation exception.
    queryParameters:
      programName:
        description: A string to search within the program's name.
        type: string
      programDescription:
        description: A string to search within an program's description.
        type: string
      startDate:
        description: >-
          The start date for the date range filter. It filters by only returning
          programs which were or should be active in the given date range.
        type: string
      endDatetime:
        description: >-
          The end date for the date range filter. It filters by only returning
          programs which were or should be active in the given date range.
        type: string
      patientUids:
        description: >-
          Filters programs so that the results include only programs with the
          given patients (semicolon separated list).
        type: string
      page:
        description: Current front-end page number; required for pagination.
        type: integer
      itemsPerPage:
        description: Current front-end items per page value; required for pagination.
        type: integer
      sort:
        description: >-
          Attribute(s) and order(s) to sort by in the following example format -
          "uid desc, timeoccurred asc" etc. Attribute names are case-sensitive.
          Omit to sort by 'name' ascending as default.
        type: string
    securedBy:
      - auth
  '/{programName}':
    uriParameters:
      programName:
        description: programName
        type: string
    delete:
      displayName: deleteProgram
      description: Delete a program by programName.
      responses:
        '404':
          description: Program not found.
      securedBy:
        - auth
    put:
      displayName: updateProgram
      description: Modify a program by programName.
      responses:
        '200':
          description: Program found and modified.
        '404':
          description: Program not found.
        '405':
          description: Validation exception.
      securedBy:
        - auth
    get:
      displayName: getProgram
      description: Get a program by programName.
      responses:
        '200':
          description: Program found and returned.
          body:
            application/json:
              type: Program
        '404':
          description: Program not found.
      securedBy:
        - auth
/users:
  post:
    displayName: addUser
    description: Add a new user to the database.
    responses:
      '200':
        description: User created.
      '405':
        description: Validation error.
    securedBy:
      - auth
  get:
    displayName: getUsersByValues
    description: Get a list of users filtered by their values.
    responses:
      '200':
        description: Query completed; results returned.
        body:
          application/json:
            type: User-array
      '400':
        description: Incomplete or invalid pagination or sort parameters.
      '405':
        description: Validation exception.
    queryParameters:
      username:
        description: Login username.
        type: string
      emailAddress:
        description: User's email address.
        type: string
      role:
        description: User's permission roles as a comma separated String.
        type: string
      page:
        description: Current front-end page number; required for pagination.
        type: integer
      itemsPerPage:
        description: Current front-end items per page value; required for pagination.
        type: integer
      sort:
        description: >-
          Attribute(s) and order(s) to sort by in the following example format -
          "uid desc, timeoccurred asc" etc. Attribute names are case-sensitive.
          Omit to sort by 'username' ascending as default.
        type: string
    securedBy:
      - auth
  '/{username}':
    uriParameters:
      username:
        description: username
        type: string
    delete:
      displayName: deleteUser
      description: Delete a user by username.
      responses:
        '404':
          description: User not found.
      securedBy:
        - auth
    put:
      displayName: updateUser
      description: Modify a user using its username.
      responses:
        '200':
          description: User found and modified.
        '404':
          description: User not found.
        '405':
          description: Validation exception.
      securedBy:
        - auth
    get:
      displayName: getUser
      description: Get a user by username.
      responses:
        '200':
          description: User found and returned.
          body:
            application/json:
              type: User
        '404':
          description: User not found.
      securedBy:
        - auth
/bottlereadings:
  get:
    displayName: getBottleReadingsByValues
    description: 'Get a list of bottle readings filtered by status, bottle or date.'
    responses:
      '200':
        description: Query completed; results returned.
        body:
          application/json:
            type: BottleReading-array
      '400':
        description: Incomplete or invalid pagination or sort parameters.
      '405':
        description: Validation exception.
    queryParameters:
      bottleReadingId:
        description: The ID of the bottle reading.
        type: integer
      bottleUid:
        description: The bottle UID.
        type: string
      checkinType:
        description: The type of check-in for this reading.
        type: string
      startDatetime:
        description: >-
          The start date for the date range filter. It filters by
          receivedDateTime.
        type: string
      endDatetime:
        description: >-
          The end date for the date range filter. It filters by
          receivedDateTime.
        type: string
      batteryLevel:
        description: The numerical representation of the battery level.
        type: integer
      batteryStatus:
        description: The text representation of the battery status.
        type: string
      cellServiceLevel:
        description: The numerical representation of the cell signal level.
        type: integer
      cellServiceStatus:
        description: The text representation of the cell signal status.
        type: string
      page:
        description: Current front-end page number; required for pagination.
        type: integer
      itemsPerPage:
        description: Current front-end items per page value; required for pagination.
        type: integer
      sort:
        description: >-
          Attribute(s) and order(s) to sort by in the following example format -
          "uid desc, timeoccurred asc" etc. Attribute names are case-sensitive.
          Omit to sort by 'timereceived' descending as default.
        type: string
    securedBy:
      - auth
/doses:
  get:
    displayName: getDosesByValues
    description: 'Get a list of doses filtered by status, bottle, patient or date.'
    responses:
      '200':
        description: Query completed; results returned.
        body:
          application/json:
            type: Dose-array
      '400':
        description: Incomplete or invalid pagination or sort parameters.
      '405':
        description: Validation exception.
    queryParameters:
      patientUid:
        description: The UID of the patient.
        type: string
      bottleUid:
        description: The UID of the bottle.
        type: string
      bottleReadingId:
        description: The ID of the bottle reading.
        type: string
      reminderSent:
        description: If a reminder was sent for this dose.
        type: boolean
      doseStatus:
        description: 'The status of the dose (missed, early, ontime).'
        type: string
      deadline:
        description: The deadline of the dose.
        type: string
      startDatetime:
        description: Start date for the date range filter.
        type: string
      endDatetime:
        description: End date for the date range filter.
        type: string
      page:
        description: Current front-end page number; required for pagination.
        type: integer
      itemsPerPage:
        description: Current front-end items per page value; required for pagination.
        type: integer
      sort:
        description: >-
          Attribute(s) and order(s) to sort by in the following example format -
          "uid desc, timeoccurred asc" etc. Attribute names are case-sensitive.
          Omit to sort by 'timerecorded' descending as default.
        type: string
    securedBy:
      - auth
/events:
  get:
    displayName: getEvents
    description: Get a list of events.
    responses:
      '200':
        description: Query completed; results returned.
        body:
          application/json:
            type: Event-array
      '400':
        description: Incomplete or invalid pagination or sort parameters.
      '405':
        description: Validation exception.
    queryParameters:
      patientUid:
        description: Patient UID.
        type: string
      bottleUid:
        description: Bottle UID for filtering.
        type: string
      eventType:
        description: The type of event to select.
        type: string
      bottleReadingId:
        description: Bottle Reading ID for filtering.
        type: integer
      startDatetime:
        description: The start date for the date range filter. It filters by timeOccurred.
        type: string
      endDatetime:
        description: The end date for the date range filter. It filters by timeOccurred.
        type: string
      page:
        description: Current front-end page number; required for pagination.
        type: integer
      itemsPerPage:
        description: Current front-end items per page value; required for pagination.
        type: integer
      sort:
        description: >-
          Attribute(s) and order(s) to sort by in the following example format -
          "uid desc, timeoccurred asc" etc. Attribute names are case-sensitive.
          Omit to sort by 'timeoccurred' descending as default.
        type: string
    securedBy:
      - auth
  /subscriptions:
    post:
      displayName: addSubscription
      description: Add a new event subscription.
      responses:
        '200':
          description: Subscription created.
        '405':
          description: Validation error.
      securedBy:
        - auth
    get:
      displayName: getSubscriptions
      description: Get every subscription.
      responses:
        '200':
          description: Subscriptions returned.
          body:
            application/json:
              type: EventSubscription-array
      securedBy:
        - auth
    '/{subscriptionId}':
      uriParameters:
        subscriptionId:
          description: subscriptionId
          type: integer
      delete:
        displayName: deleteSubscription
        description: Delete a subscription by ID.
        securedBy:
          - auth
        (oas-responses-default):
          body:
            application/json: {}
      get:
        displayName: getSubscription
        description: Get a subscription by ID.
        responses:
          '200':
            description: Subscription found and returned.
            body:
              application/json:
                type: EventSubscription
        securedBy:
          - auth
/eventtypes:
  get:
    displayName: getEventTypes
    description: Get the available types of server events.
    responses:
      '200':
        description: Query completed; results returned.
    securedBy:
      - auth
/alerts:
  get:
    displayName: getAlerts
    description: Get a list of alerts.
    responses:
      '200':
        description: Query completed; results returned.
        body:
          application/json:
            type: Alert-array
      '400':
        description: Incomplete or invalid pagination or sort parameters.
      '405':
        description: Validation exception.
    queryParameters:
      patientUid:
        description: Patient UID.
        type: string
      bottleUid:
        description: Bottle UID for filtering.
        type: string
      alertType:
        description: The type of alert to select.
        type: string
      bottleReadingId:
        description: Bottle Reading ID for filtering.
        type: integer
      state:
        description: State for filtering.
        type: string
      priority:
        description: >-
          minimum priority for filtering. The request will return every alert
          with a priority higher than this number.
        type: integer
      startDatetime:
        description: The start date for the date range filter. It filters by timeOccurred.
        type: string
      endDatetime:
        description: The end date for the date range filter. It filters by timeOccurred.
        type: string
      page:
        description: Current front-end page number; required for pagination.
        type: integer
      itemsPerPage:
        description: Current front-end items per page value; required for pagination.
        type: integer
      sort:
        description: >-
          Attribute(s) and order(s) to sort by in the following example format -
          "uid desc, timeoccurred asc" etc. Attribute names are case-sensitive.
          Omit to sort by 'timeoccurred' descending as default.
        type: string
    securedBy:
      - auth
  '/{alertId}':
    uriParameters:
      alertId:
        description: alertId
        type: integer
    put:
      displayName: updateAlert
      description: Modify an alert record.
      responses:
        '200':
          description: Alert found and modified.
        '404':
          description: Alert not found.
        '405':
          description: Validation exception.
      securedBy:
        - auth
    get:
      displayName: getAlert
      description: Get a specific alert.
      responses:
        '200':
          description: Query completed; results returned.
          body:
            application/json:
              type: Alert
        '405':
          description: Validation exception.
      securedBy:
        - auth
/alerttypes:
  get:
    displayName: getAlertTypes
    description: Get the available types of server alerts.
    responses:
      '200':
        description: Query completed; results returned.
    securedBy:
      - auth
/search:
  get:
    displayName: getSearch
    description: Get search results for a query.
    responses:
      '200':
        description: Query completed; results returned.
        body:
          application/json:
            type: SearchResult-array
    queryParameters:
      q:
        description: The search query.
        type: string
    securedBy:
      - auth
/pauses:
  post:
    displayName: addPause
    description: Add a new pause for a patient to the database.
    responses:
      '200':
        description: Pause created.
        body:
          application/json:
            type: Pause
      '400':
        description: Patient not found or invalid parameters.
      '405':
        description: Validation error.
    securedBy:
      - auth
  get:
    displayName: getPauses
    description: Get a list of pauses.
    responses:
      '200':
        description: Query completed; results returned.
        body:
          application/json:
            type: Pause-array
      '400':
        description: Incomplete or invalid pagination or sort parameters.
      '405':
        description: Validation exception.
    queryParameters:
      patientUid:
        description: Patient UID.
        type: string
      status:
        description: Pause status for filtering.
        type: string
      startdateBefore:
        description: The maximum start date for the date range filter.
        type: string
      startdateAfter:
        description: The minimum start date for the date range filter.
        type: string
      enddateBefore:
        description: The maximum end date for the date range filter.
        type: string
      enddateAfter:
        description: The minimum end date for the date range filter.
        type: string
      page:
        description: Current front-end page number; required for pagination.
        type: integer
      itemsPerPage:
        description: Current front-end items per page value; required for pagination.
        type: integer
      sort:
        description: >-
          Attribute(s) and order(s) to sort by in the following example format -
          "uid desc, timeoccurred asc" etc. Attribute names are case-sensitive.
          Omit to sort by 'startdate' descending as default.
        type: string
    securedBy:
      - auth
  '/{pauseId}':
    uriParameters:
      pauseId:
        description: pauseId
        type: integer
    delete:
      displayName: deletePause
      description: Delete a future pause.
      responses:
        '200':
          description: Pause found and deleted.
          body:
            application/json:
              type: Pause
        '400':
          description: Pause cannot be deleted.
        '404':
          description: Pause not found.
        '405':
          description: Validation exception.
      securedBy:
        - auth
    put:
      displayName: updatePause
      description: Update a pause by id.
      responses:
        '200':
          description: Pause found and updated.
          body:
            application/json:
              type: Pause
        '400':
          description: Invalid parameters / arguments.
        '404':
          description: Pause not found.
        '405':
          description: Validation exception.
      queryParameters:
        endnow:
          description: Set true to end an active pause.
          type: boolean
      securedBy:
        - auth
    get:
      displayName: getPause
      description: Get a specific pause.
      responses:
        '200':
          description: Query completed; results returned.
          body:
            application/json:
              type: Pause
        '404':
          description: Pause not found.
        '405':
          description: Validation exception.
      securedBy:
        - auth