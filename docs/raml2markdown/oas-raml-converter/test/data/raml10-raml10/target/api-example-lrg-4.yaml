#%RAML 1.0
title: AdhereTech External API
version: 0.11.0
documentation:
- title: AdhereTech External API
  content: An API designed to expose AdhereTech server's data to clients and other services.
baseUri: https://example.com/api/v1
protocols:
  - HTTPS
securitySchemes:
  auth:
    type: Basic Authentication
types:
  Bottle-array: |
    {
      "type": "array",
      "items": {
        "id": "Bottle",
        "title": "Bottle",
        "type": "object",
        "properties": {
          "bottleUid": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "remindersActive": {
            "type": "boolean"
          },
          "onBottleLights": {
            "type": "boolean"
          },
          "onBottleSounds": {
            "type": "boolean"
          },
          "doseOne": {
            "type": "string"
          },
          "doseTwo": {
            "type": "string"
          },
          "doseThree": {
            "type": "string"
          },
          "feedbackActive": {
            "type": "boolean"
          },
          "patientUid": {
            "type": "string"
          }
        },
        "required": [
          "bottleUid"
        ]
      }
    }
  Bottle: |
    {
      "id": "Bottle",
      "title": "Bottle",
      "type": "object",
      "properties": {
        "bottleUid": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "remindersActive": {
          "type": "boolean"
        },
        "onBottleLights": {
          "type": "boolean"
        },
        "onBottleSounds": {
          "type": "boolean"
        },
        "doseOne": {
          "type": "string"
        },
        "doseTwo": {
          "type": "string"
        },
        "doseThree": {
          "type": "string"
        },
        "feedbackActive": {
          "type": "boolean"
        },
        "patientUid": {
          "type": "string"
        }
      },
      "required": [
        "bottleUid"
      ]
    }
  Patient-array: |
    {
      "type": "array",
      "items": {
        "id": "Patient",
        "title": "Patient",
        "type": "object",
        "properties": {
          "patientUid": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "contactMethod": {
            "type": "string"
          },
          "emailAddress": {
            "type": "string"
          },
          "caregiverPhoneNumber": {
            "type": "string"
          },
          "caregiverContactMethod": {
            "type": "string"
          },
          "caregiverEmailAddress": {
            "type": "string"
          },
          "programName": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "defaultDose1": {
            "type": "string"
          },
          "defaultDose2": {
            "type": "string"
          },
          "defaultDose3": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "lastDose": {
            "type": "string"
          },
          "adherence": {
            "type": "number"
          },
          "adherence7Day": {
            "type": "number"
          },
          "adherence30Day": {
            "type": "number"
          },
          "bottleUids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "patientUid"
        ]
      }
    }
  Patient: |
    {
      "id": "Patient",
      "title": "Patient",
      "type": "object",
      "properties": {
        "patientUid": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "contactMethod": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "caregiverPhoneNumber": {
          "type": "string"
        },
        "caregiverContactMethod": {
          "type": "string"
        },
        "caregiverEmailAddress": {
          "type": "string"
        },
        "programName": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "defaultDose1": {
          "type": "string"
        },
        "defaultDose2": {
          "type": "string"
        },
        "defaultDose3": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "lastDose": {
          "type": "string"
        },
        "adherence": {
          "type": "number"
        },
        "adherence7Day": {
          "type": "number"
        },
        "adherence30Day": {
          "type": "number"
        },
        "bottleUids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "patientUid"
      ]
    }
  FeedbackRequest-array: |
    {
      "type": "array",
      "items": {
        "id": "FeedbackRequest",
        "title": "FeedbackRequest",
        "type": "object",
        "properties": {
          "feedbackId": {
            "type": "integer",
            "format": "int32"
          },
          "patientUid": {
            "type": "string"
          },
          "bottleUid": {
            "type": "string"
          },
          "feedbackProfileId": {
            "type": "integer",
            "format": "int32"
          },
          "sendTime": {
            "type": "string"
          }
        },
        "required": [
          "feedbackId",
          "patientUid",
          "feedbackProfileId"
        ]
      }
    }
  FeedbackRequest: |
    {
      "id": "FeedbackRequest",
      "title": "FeedbackRequest",
      "type": "object",
      "properties": {
        "feedbackId": {
          "type": "integer",
          "format": "int32"
        },
        "patientUid": {
          "type": "string"
        },
        "bottleUid": {
          "type": "string"
        },
        "feedbackProfileId": {
          "type": "integer",
          "format": "int32"
        },
        "sendTime": {
          "type": "string"
        }
      },
      "required": [
        "feedbackId",
        "patientUid",
        "feedbackProfileId"
      ]
    }
  Program-array: |
    {
      "type": "array",
      "items": {
        "id": "Program",
        "title": "Program",
        "type": "object",
        "properties": {
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "programName": {
            "type": "string"
          },
          "programDescription": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "patientUids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "programId",
          "programName"
        ]
      }
    }
  Program: |
    {
      "id": "Program",
      "title": "Program",
      "type": "object",
      "properties": {
        "programId": {
          "type": "integer",
          "format": "int32"
        },
        "programName": {
          "type": "string"
        },
        "programDescription": {
          "type": "string"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "patientUids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "programId",
        "programName"
      ]
    }
  User-array: |
    {
      "type": "array",
      "items": {
        "id": "User",
        "title": "User",
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "emailAddress": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "username"
        ]
      }
    }
  User: |
    {
      "id": "User",
      "title": "User",
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "username"
      ]
    }
  BottleReading-array: |
    {
      "type": "array",
      "items": {
        "id": "BottleReading",
        "title": "BottleReading",
        "type": "object",
        "properties": {
          "bottleReadingId": {
            "type": "integer",
            "format": "int32"
          },
          "bottleUid": {
            "type": "string"
          },
          "checkinType": {
            "type": "string"
          },
          "recordedDatetime": {
            "type": "string"
          },
          "receivedDatetime": {
            "type": "string"
          },
          "batteryLevel": {
            "type": "integer",
            "format": "int32"
          },
          "batteryStatus": {
            "type": "string"
          },
          "cellServiceLevel": {
            "type": "integer",
            "format": "int32"
          },
          "cellServiceStatus": {
            "type": "string"
          }
        },
        "required": [
          "bottleReadingId",
          "bottleUid",
          "recordedDatetime",
          "receivedDatetime"
        ]
      }
    }
  Dose-array: |
    {
      "type": "array",
      "items": {
        "id": "Dose",
        "title": "Dose",
        "type": "object",
        "properties": {
          "patientUid": {
            "type": "string"
          },
          "bottleUid": {
            "type": "string"
          },
          "bottleReadingId": {
            "type": "integer",
            "format": "int32"
          },
          "reminderSent": {
            "type": "boolean"
          },
          "doseStatus": {
            "type": "string"
          },
          "deadline": {
            "type": "string"
          },
          "recordedDatetime": {
            "type": "string"
          }
        },
        "required": [
          "patientUid",
          "bottleUid",
          "doseStatus",
          "recordedDatetime"
        ]
      }
    }
  Event-array: |
    {
      "type": "array",
      "items": {
        "id": "Event",
        "title": "Event",
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string"
          },
          "eventType": {
            "type": "string"
          },
          "timeOccurred": {
            "type": "string"
          },
          "patientUid": {
            "type": "string"
          },
          "bottleUid": {
            "type": "string"
          },
          "bottleReadingId": {
            "type": "string"
          }
        },
        "required": [
          "eventId",
          "eventType",
          "timeOccurred"
        ]
      }
    }
  EventSubscription-array: |
    {
      "type": "array",
      "items": {
        "id": "EventSubscription",
        "title": "EventSubscription",
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string"
          },
          "eventType": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "callbackUrl": {
            "type": "string"
          }
        },
        "required": [
          "subscriptionId",
          "eventType",
          "username",
          "callbackUrl"
        ]
      }
    }
  EventSubscription: |
    {
      "id": "EventSubscription",
      "title": "EventSubscription",
      "type": "object",
      "properties": {
        "subscriptionId": {
          "type": "string"
        },
        "eventType": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "callbackUrl": {
          "type": "string"
        }
      },
      "required": [
        "subscriptionId",
        "eventType",
        "username",
        "callbackUrl"
      ]
    }
  Alert-array: |
    {
      "type": "array",
      "items": {
        "id": "Alert",
        "title": "Alert",
        "type": "object",
        "properties": {
          "alertId": {
            "type": "integer",
            "format": "int32"
          },
          "alertType": {
            "type": "string"
          },
          "timeOccurred": {
            "type": "string"
          },
          "programName": {
            "type": "string"
          },
          "patientUid": {
            "type": "string"
          },
          "bottleUid": {
            "type": "string"
          },
          "bottleReadingId": {
            "type": "integer",
            "format": "int32"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "state": {
            "type": "string"
          }
        },
        "required": [
          "alertId",
          "alertType",
          "timeOccurred"
        ]
      }
    }
  Alert: |
    {
      "id": "Alert",
      "title": "Alert",
      "type": "object",
      "properties": {
        "alertId": {
          "type": "integer",
          "format": "int32"
        },
        "alertType": {
          "type": "string"
        },
        "timeOccurred": {
          "type": "string"
        },
        "programName": {
          "type": "string"
        },
        "patientUid": {
          "type": "string"
        },
        "bottleUid": {
          "type": "string"
        },
        "bottleReadingId": {
          "type": "integer",
          "format": "int32"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "state": {
          "type": "string"
        }
      },
      "required": [
        "alertId",
        "alertType",
        "timeOccurred"
      ]
    }
  SearchResult-array: |
    {
      "type": "array",
      "items": {
        "id": "SearchResult",
        "title": "SearchResult",
        "type": "object",
        "properties": {
          "resultType": {
            "type": "string"
          },
          "resultUid": {
            "type": "string"
          }
        },
        "required": [
          "resultType",
          "resultUid"
        ]
      }
    }
  Pause-array: |
    {
      "type": "array",
      "items": {
        "id": "Pause",
        "title": "Pause",
        "type": "object",
        "properties": {
          "pauseId": {
            "type": "integer",
            "format": "int32"
          },
          "patientUid": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "startdate": {
            "type": "string"
          },
          "enddate": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          }
        },
        "required": [
          "pauseId",
          "patientUid",
          "status",
          "startdate"
        ]
      }
    }
  Pause: |
    {
      "id": "Pause",
      "title": "Pause",
      "type": "object",
      "properties": {
        "pauseId": {
          "type": "integer",
          "format": "int32"
        },
        "patientUid": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "startdate": {
          "type": "string"
        },
        "enddate": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        }
      },
      "required": [
        "pauseId",
        "patientUid",
        "status",
        "startdate"
      ]
    }
/bottles:
  /{bottleUid}:
    uriParameters:
      bottleUid:
        description: Bottle UID
        type: string
        displayName: bottleUid
    get:
      securedBy:
      - auth
      displayName: getBottle
      description: Get a bottle by its UID.
      responses:
        200:
          description: Bottle found and returned
          body:
            application/json:
              type: Bottle
        404:
          description: Bottle not found.
    put:
      securedBy:
      - auth
      displayName: updateBottle
      description: Modify a bottle by its UID.
      responses:
        200:
          description: Bottle found and modified.
        404:
          description: Bottle not found.
        405:
          description: Validation exception.
  get:
    securedBy:
    - auth
    displayName: getBottlesByValues
    description: Get a list of bottles filtered by status and/or patient(s).
    responses:
      200:
        description: Query completed; results returned.
        body:
          application/json:
            type: Bottle-array
      400:
        description: Incomplete or invalid pagination or sort parameters.
      405:
        description: Validation exception.
    queryParameters:
      isActive:
        description: Flag that indicates if bottle is active.
        type: boolean
        displayName: isActive
      remindersActive:
        description: Flag that indicates if reminders are active.
        type: boolean
        displayName: remindersActive
      onBottleLights:
        description: Flag that indicates if visual alarms are active.
        type: boolean
        displayName: onBottleLights
      onBottleSounds:
        description: Flag that indicates if auditory alarms are active.
        type: boolean
        displayName: onBottleSounds
      feedbackActive:
        description: Flag that indicates if feedback requests are active.
        type: boolean
        displayName: feedbackActive
      patientUid:
        description: The ID of the patient using this bottle.
        type: integer
        displayName: patientUid
      page:
        description: Current front-end page number; required for pagination.
        type: integer
        displayName: page
      itemsPerPage:
        description: Current front-end items per page value; required for pagination.
        type: integer
        displayName: itemsPerPage
      sort:
        description: Attribute(s) and order(s) to sort by in the following example format - "uid desc, timeoccurred asc" etc. Attribute names are case-sensitive. Omit to sort by 'uid' ascending as default.
        type: string
        displayName: sort
/patients:
  /{patientUid}:
    uriParameters:
      patientUid:
        description: Patient UID
        type: string
        displayName: patientUid
    /disenroll:
      post:
        securedBy:
        - auth
        displayName: disenrollPatient
        description: Disenroll a patient by UID.
        responses:
          200:
            description: Patient found and disenrolled. All bottles and reminders disabled
          400:
            description: Patient not found. Or patient already disenrolled. Or invalid parameter
        queryParameters:
          endDate:
            description: effective endDate for disenrollment (default is now). Dates in future not allowed. (UTC).
            type: string
            required: false
            displayName: endDate
          notes:
            description: notes to include with disenrollment action
            type: string
            required: false
            displayName: notes
    /reenroll:
      post:
        securedBy:
        - auth
        displayName: reenrollpatient
        description: Reenroll a patient.
        responses:
          200:
            description: Patient found and reenrolled
          404:
            description: Patient not found. Or patient already enrolled
        queryParameters:
          notes:
            description: Notes to be included with reenrollment event
            type: string
            required: false
            displayName: notes
    /feedbackrequests:
      /{feedbackId}:
        uriParameters:
          feedbackId:
            description: Feedback request ID
            type: integer
            displayName: feedbackId
        get:
          securedBy:
          - auth
          displayName: getFeedbackRequest
          description: Get a feedback request by its ID.
          responses:
            200:
              description: Feedback request found and returned
              body:
                application/json:
                  type: FeedbackRequest
            404:
              description: Feedback request not found.
        put:
          securedBy:
          - auth
          displayName: updateFeedbackRequest
          description: Modify a feedback request by its ID.
          responses:
            200:
              description: Feedback request found and modified.
            404:
              description: Feedback request not found.
            405:
              description: Validation exception.
        delete:
          securedBy:
          - auth
          displayName: deleteFeedbackRequest
          description: Delete a feedback request by ID.
          responses:
            404:
              description: Feedback request not found.
      get:
        securedBy:
        - auth
        displayName: getFeedbackRequests
        description: Get all active (scheduled but unsent) feedback requests for a patient.
        responses:
          200:
            description: Query completed; results returned.
            body:
              application/json:
                type: FeedbackRequest-array
          400:
            description: Incomplete or invalid pagination or sort parameters.
          405:
            description: Validation exception.
        queryParameters:
          page:
            description: Current front-end page number; required for pagination.
            type: integer
            displayName: page
          itemsPerPage:
            description: Current front-end items per page value; required for pagination.
            type: integer
            displayName: itemsPerPage
          sort:
            description: Attribute(s) and order(s) to sort by in the following example format - "uid desc, timeoccurred asc" etc. Attribute names are case-sensitive. Omit to sort by 'timesent' descending as default.
            type: string
            displayName: sort
      post:
        securedBy:
        - auth
        displayName: addFeedbackRequest
        description: Add a new feedback request for a patient.
        responses:
          200:
            description: Feedback request created.
          404:
            description: Patient not found.
          405:
            description: Validation error.
      delete:
        securedBy:
        - auth
        displayName: deleteFeedbackRequests
        description: Delete all active feedback requests for a patient.
        responses:
          404:
            description: Patient not found.
    get:
      securedBy:
      - auth
      displayName: getPatient
      description: Get a patient by UID.
      responses:
        200:
          description: Patient found and returned.
          body:
            application/json:
              type: Patient
        404:
          description: Patient not found.
    put:
      securedBy:
      - auth
      displayName: updatePatient
      description: Modify a Patient using a patient UID number.
      responses:
        200:
          description: Patient found and modified.
        404:
          description: Patient not found.
        405:
          description: Validation exception.
    delete:
      securedBy:
      - auth
      displayName: deletePatient
      description: Delete a patient by UID.
      responses:
        404:
          description: Patient not found.
  get:
    securedBy:
    - auth
    displayName: getPatientsByValues
    description: Get a list of patients filtered by their values.
    responses:
      200:
        description: Query completed; results returned.
        body:
          application/json:
            type: Patient-array
      400:
        description: Incomplete or invalid pagination or sort parameters.
      405:
        description: Validation exception.
    queryParameters:
      firstName:
        description: Patient's first name.
        type: string
        displayName: firstName
      lastName:
        description: Patient's last name.
        type: string
        displayName: lastName
      phoneNumber:
        description: Patient's phone number.
        type: string
        displayName: phoneNumber
      programName:
        description: A string to search within the program's name.
        type: string
        displayName: programName
      contactMethod:
        description: The contact method used to reach the patient (phone, sms or email).
        type: string
        displayName: contactMethod
      emailAddress:
        description: Patient's email address.
        type: string
        displayName: emailAddress
      page:
        description: Current front-end page number; required for pagination.
        type: integer
        displayName: page
      itemsPerPage:
        description: Current front-end items per page value; required for pagination.
        type: integer
        displayName: itemsPerPage
      sort:
        description: Attribute(s) and order(s) to sort by in the following example format - "uid desc, timeoccurred asc" etc. Attribute names are case-sensitive. Omit to sort by 'uid' ascending as default.
        type: string
        displayName: sort
  post:
    securedBy:
    - auth
    displayName: addPatient
    description: Add a new patient to the database.
    responses:
      200:
        description: Patient created.
      404:
        description: Address not found.
      405:
        description: Validation error.
    queryParameters:
      bottleUids,:
        description: Comma separated list of bottleUids for this bottle. Removing from this list will remove it from the patient. Adding bottles must be done through Bottle endpoint
        type: string
        displayName: bottleUids,
/programs:
  /{programName}:
    uriParameters:
      programName:
        description: Program name.
        type: string
        displayName: programName
    get:
      securedBy:
      - auth
      displayName: getProgram
      description: Get a program by programName.
      responses:
        200:
          description: Program found and returned.
          body:
            application/json:
              type: Program
        404:
          description: Program not found.
    put:
      securedBy:
      - auth
      displayName: updateProgram
      description: Modify a program by programName.
      responses:
        200:
          description: Program found and modified.
        404:
          description: Program not found.
        405:
          description: Validation exception.
    delete:
      securedBy:
      - auth
      displayName: deleteProgram
      description: Delete a program by programName.
      responses:
        404:
          description: Program not found.
  get:
    securedBy:
    - auth
    displayName: getPrograms
    description: Get a list of programs filtered by their values.
    responses:
      200:
        description: Query completed; results returned.
        body:
          application/json:
            type: Program-array
      400:
        description: Incomplete or invalid pagination or sort parameters.
      405:
        description: Validation exception.
    queryParameters:
      programName:
        description: A string to search within the program's name.
        type: string
        displayName: programName
      programDescription:
        description: A string to search within an program's description.
        type: string
        displayName: programDescription
      startDate:
        description: The start date for the date range filter. It filters by only returning programs which were or should be active in the given date range.
        type: datetime
        format: rfc2616
        displayName: startDate
      endDatetime:
        description: The end date for the date range filter. It filters by only returning programs which were or should be active in the given date range.
        type: datetime
        format: rfc2616
        displayName: endDatetime
      patientUids:
        description: Filters programs so that the results include only programs with the given patients (semicolon separated list).
        type: string
        displayName: patientUids
      page:
        description: Current front-end page number; required for pagination.
        type: integer
        displayName: page
      itemsPerPage:
        description: Current front-end items per page value; required for pagination.
        type: integer
        displayName: itemsPerPage
      sort:
        description: Attribute(s) and order(s) to sort by in the following example format - "uid desc, timeoccurred asc" etc. Attribute names are case-sensitive. Omit to sort by 'name' ascending as default.
        type: string
        displayName: sort
  post:
    securedBy:
    - auth
    displayName: addProgram
    description: Add a new program to the database.
    responses:
      200:
        description: Program created.
      404:
        description: Address not found.
      405:
        description: Validation error.
/users:
  /{username}:
    uriParameters:
      username:
        description: username
        type: string
        displayName: username
    get:
      securedBy:
      - auth
      displayName: getUser
      description: Get a user by username.
      responses:
        200:
          description: User found and returned.
          body:
            application/json:
              type: User
        404:
          description: User not found.
    put:
      securedBy:
      - auth
      displayName: updateUser
      description: Modify a user using its username.
      responses:
        200:
          description: User found and modified.
        404:
          description: User not found.
        405:
          description: Validation exception.
    delete:
      securedBy:
      - auth
      displayName: deleteUser
      description: Delete a user by username.
      responses:
        404:
          description: User not found.
  get:
    securedBy:
    - auth
    displayName: getUsersByValues
    description: Get a list of users filtered by their values.
    responses:
      200:
        description: Query completed; results returned.
        body:
          application/json:
            type: User-array
      400:
        description: Incomplete or invalid pagination or sort parameters.
      405:
        description: Validation exception.
    queryParameters:
      username:
        description: Login username.
        type: string
        displayName: username
      emailAddress:
        description: User's email address.
        type: string
        displayName: emailAddress
      role:
        description: User's permission roles as a comma separated String.
        type: string
        displayName: role
      page:
        description: Current front-end page number; required for pagination.
        type: integer
        displayName: page
      itemsPerPage:
        description: Current front-end items per page value; required for pagination.
        type: integer
        displayName: itemsPerPage
      sort:
        description: Attribute(s) and order(s) to sort by in the following example format - "uid desc, timeoccurred asc" etc. Attribute names are case-sensitive. Omit to sort by 'username' ascending as default.
        type: string
        displayName: sort
  post:
    securedBy:
    - auth
    displayName: addUser
    description: Add a new user to the database.
    responses:
      200:
        description: User created.
      405:
        description: Validation error.
/bottlereadings:
  get:
    securedBy:
    - auth
    displayName: getBottleReadingsByValues
    description: Get a list of bottle readings filtered by status, bottle or date.
    responses:
      200:
        description: Query completed; results returned.
        body:
          application/json:
            type: BottleReading-array
      400:
        description: Incomplete or invalid pagination or sort parameters.
      405:
        description: Validation exception.
    queryParameters:
      bottleReadingId:
        description: The ID of the bottle reading.
        type: integer
        displayName: bottleReadingId
      bottleUid:
        description: The bottle UID.
        type: string
        displayName: bottleUid
      checkinType:
        description: The type of check-in for this reading.
        type: string
        displayName: checkinType
      startDatetime:
        description: The start date for the date range filter. It filters by receivedDateTime.
        type: string
        displayName: startDatetime
      endDatetime:
        description: The end date for the date range filter. It filters by receivedDateTime.
        type: string
        displayName: endDatetime
      batteryLevel:
        description: The numerical representation of the battery level.
        type: integer
        displayName: batteryLevel
      batteryStatus:
        description: The text representation of the battery status.
        type: string
        displayName: batteryStatus
      cellServiceLevel:
        description: The numerical representation of the cell signal level.
        type: integer
        displayName: cellServiceLevel
      cellServiceStatus:
        description: The text representation of the cell signal status.
        type: string
        displayName: cellServiceStatus
      page:
        description: Current front-end page number; required for pagination.
        type: integer
        displayName: page
      itemsPerPage:
        description: Current front-end items per page value; required for pagination.
        type: integer
        displayName: itemsPerPage
      sort:
        description: Attribute(s) and order(s) to sort by in the following example format - "uid desc, timeoccurred asc" etc. Attribute names are case-sensitive. Omit to sort by 'timereceived' descending as default.
        type: string
        displayName: sort
/doses:
  get:
    securedBy:
    - auth
    displayName: getDosesByValues
    description: Get a list of doses filtered by status, bottle, patient or date.
    responses:
      200:
        description: Query completed; results returned.
        body:
          application/json:
            type: Dose-array
      400:
        description: Incomplete or invalid pagination or sort parameters.
      405:
        description: Validation exception.
    queryParameters:
      patientUid:
        description: The UID of the patient.
        type: string
        displayName: patientUid
      bottleUid:
        description: The UID of the bottle.
        type: string
        displayName: bottleUid
      bottleReadingId:
        description: The ID of the bottle reading.
        type: string
        displayName: bottleReadingId
      reminderSent:
        description: If a reminder was sent for this dose.
        type: boolean
        displayName: reminderSent
      doseStatus:
        description: The status of the dose (missed, early, ontime).
        type: string
        displayName: doseStatus
      deadline:
        description: The deadline of the dose.
        type: string
        displayName: deadline
      startDatetime:
        description: Start date for the date range filter.
        type: string
        displayName: startDatetime
      endDatetime:
        description: End date for the date range filter.
        type: string
        displayName: endDatetime
      page:
        description: Current front-end page number; required for pagination.
        type: integer
        displayName: page
      itemsPerPage:
        description: Current front-end items per page value; required for pagination.
        type: integer
        displayName: itemsPerPage
      sort:
        description: Attribute(s) and order(s) to sort by in the following example format - "uid desc, timeoccurred asc" etc. Attribute names are case-sensitive. Omit to sort by 'timerecorded' descending as default.
        type: string
        displayName: sort
/events:
  /subscriptions:
    /{subscriptionId}:
      uriParameters:
        subscriptionId:
          description: Subscription ID
          type: integer
          displayName: subscriptionId
      get:
        securedBy:
        - auth
        displayName: getSubscription
        description: Get a subscription by ID.
        responses:
          200:
            description: Subscription found and returned.
            body:
              application/json:
                type: EventSubscription
      delete:
        securedBy:
        - auth
        displayName: deleteSubscription
        description: Delete a subscription by ID.
    get:
      securedBy:
      - auth
      displayName: getSubscriptions
      description: Get every subscription.
      responses:
        200:
          description: Subscriptions returned.
          body:
            application/json:
              type: EventSubscription-array
    post:
      securedBy:
      - auth
      displayName: addSubscription
      description: Add a new event subscription.
      responses:
        200:
          description: Subscription created.
        405:
          description: Validation error.
  get:
    securedBy:
    - auth
    displayName: getEvents
    description: Get a list of events.
    responses:
      200:
        description: Query completed; results returned.
        body:
          application/json:
            type: Event-array
      400:
        description: Incomplete or invalid pagination or sort parameters.
      405:
        description: Validation exception.
    queryParameters:
      patientUid:
        description: Patient UID.
        type: string
        displayName: patientUid
      bottleUid:
        description: Bottle UID for filtering.
        type: string
        displayName: bottleUid
      eventType:
        description: The type of event to select.
        type: string
        displayName: eventType
      bottleReadingId:
        description: Bottle Reading ID for filtering.
        type: integer
        displayName: bottleReadingId
      startDatetime:
        description: The start date for the date range filter. It filters by timeOccurred.
        type: string
        displayName: startDatetime
      endDatetime:
        description: The end date for the date range filter. It filters by timeOccurred.
        type: string
        displayName: endDatetime
      page:
        description: Current front-end page number; required for pagination.
        type: integer
        displayName: page
      itemsPerPage:
        description: Current front-end items per page value; required for pagination.
        type: integer
        displayName: itemsPerPage
      sort:
        description: Attribute(s) and order(s) to sort by in the following example format - "uid desc, timeoccurred asc" etc. Attribute names are case-sensitive. Omit to sort by 'timeoccurred' descending as default.
        type: string
        displayName: sort
/eventtypes:
  get:
    securedBy:
    - auth
    displayName: getEventTypes
    description: Get the available types of server events.
    responses:
      200:
        description: Query completed; results returned.
/alerts:
  /{alertId}:
    uriParameters:
      alertId:
        description: Alert ID.
        type: integer
        displayName: alertId
    get:
      securedBy:
      - auth
      displayName: getAlert
      description: Get a specific alert.
      responses:
        200:
          description: Query completed; results returned.
          body:
            application/json:
              type: Alert
        405:
          description: Validation exception.
    put:
      securedBy:
      - auth
      displayName: updateAlert
      description: Modify an alert record.
      responses:
        200:
          description: Alert found and modified.
        404:
          description: Alert not found.
        405:
          description: Validation exception.
  get:
    securedBy:
    - auth
    displayName: getAlerts
    description: Get a list of alerts.
    responses:
      200:
        description: Query completed; results returned.
        body:
          application/json:
            type: Alert-array
      400:
        description: Incomplete or invalid pagination or sort parameters.
      405:
        description: Validation exception.
    queryParameters:
      patientUid:
        description: Patient UID.
        type: string
        displayName: patientUid
      bottleUid:
        description: Bottle UID for filtering.
        type: string
        displayName: bottleUid
      alertType:
        description: The type of alert to select.
        type: string
        displayName: alertType
      bottleReadingId:
        description: Bottle Reading ID for filtering.
        type: integer
        displayName: bottleReadingId
      state:
        description: State for filtering.
        type: string
        displayName: state
      priority:
        description: minimum priority for filtering. The request will return every alert with a priority higher than this number.
        type: integer
        displayName: priority
      startDatetime:
        description: The start date for the date range filter. It filters by timeOccurred.
        type: string
        displayName: startDatetime
      endDatetime:
        description: The end date for the date range filter. It filters by timeOccurred.
        type: string
        displayName: endDatetime
      page:
        description: Current front-end page number; required for pagination.
        type: integer
        displayName: page
      itemsPerPage:
        description: Current front-end items per page value; required for pagination.
        type: integer
        displayName: itemsPerPage
      sort:
        description: Attribute(s) and order(s) to sort by in the following example format - "uid desc, timeoccurred asc" etc. Attribute names are case-sensitive. Omit to sort by 'timeoccurred' descending as default.
        type: string
        displayName: sort
/alerttypes:
  get:
    securedBy:
    - auth
    displayName: getAlertTypes
    description: Get the available types of server alerts.
    responses:
      200:
        description: Query completed; results returned.
/search:
  get:
    securedBy:
    - auth
    displayName: getSearch
    description: Get search results for a query.
    responses:
      200:
        description: Query completed; results returned.
        body:
          application/json:
            type: SearchResult-array
    queryParameters:
      q:
        description: The search query.
        type: string
        displayName: q
/pauses:
  /{pauseId}:
    uriParameters:
      pauseId:
        description: Pause ID.
        type: integer
        displayName: pauseId
    get:
      securedBy:
      - auth
      displayName: getPause
      description: Get a specific pause.
      responses:
        200:
          description: Query completed; results returned.
          body:
            application/json:
              type: Pause
        404:
          description: Pause not found.
        405:
          description: Validation exception.
    put:
      securedBy:
      - auth
      displayName: updatePause
      description: Update a pause by id.
      responses:
        200:
          description: Pause found and updated.
          body:
            application/json:
              type: Pause
        400:
          description: Invalid parameters / arguments.
        404:
          description: Pause not found.
        405:
          description: Validation exception.
      queryParameters:
        endnow:
          description: Set true to end an active pause.
          type: boolean
          displayName: endnow
    delete:
      securedBy:
      - auth
      displayName: deletePause
      description: Delete a future pause.
      responses:
        200:
          description: Pause found and deleted.
          body:
            application/json:
              type: Pause
        400:
          description: Pause cannot be deleted.
        404:
          description: Pause not found.
        405:
          description: Validation exception.
  get:
    securedBy:
    - auth
    displayName: getPauses
    description: Get a list of pauses.
    responses:
      200:
        description: Query completed; results returned.
        body:
          application/json:
            type: Pause-array
      400:
        description: Incomplete or invalid pagination or sort parameters.
      405:
        description: Validation exception.
    queryParameters:
      patientUid:
        description: Patient UID.
        type: string
        displayName: patientUid
      status:
        description: Pause status for filtering.
        type: string
        displayName: status
      startdateBefore:
        description: The maximum start date for the date range filter.
        type: string
        displayName: startdateBefore
      startdateAfter:
        description: The minimum start date for the date range filter.
        type: string
        displayName: startdateAfter
      enddateBefore:
        description: The maximum end date for the date range filter.
        type: string
        displayName: enddateBefore
      enddateAfter:
        description: The minimum end date for the date range filter.
        type: string
        displayName: enddateAfter
      page:
        description: Current front-end page number; required for pagination.
        type: integer
        displayName: page
      itemsPerPage:
        description: Current front-end items per page value; required for pagination.
        type: integer
        displayName: itemsPerPage
      sort:
        description: Attribute(s) and order(s) to sort by in the following example format - "uid desc, timeoccurred asc" etc. Attribute names are case-sensitive. Omit to sort by 'startdate' descending as default.
        type: string
        displayName: sort
  post:
    securedBy:
    - auth
    displayName: addPause
    description: Add a new pause for a patient to the database.
    responses:
      200:
        description: Pause created.
        body:
          application/json:
            type: Pause
      400:
        description: Patient not found or invalid parameters.
      405:
        description: Validation error.
